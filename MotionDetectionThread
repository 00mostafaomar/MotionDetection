
import java.awt.*;
import java.io.*;
import com.googlecode.javacv.*;
import com.googlecode.javacv.cpp.*;
import com.googlecode.javacv.cpp.opencv_core.CvContour;
import com.googlecode.javacv.cpp.opencv_core.CvMemStorage;
import com.googlecode.javacv.cpp.opencv_core.CvPoint;
import com.googlecode.javacv.cpp.opencv_core.CvRect;
import com.googlecode.javacv.cpp.opencv_core.CvScalar;
import com.googlecode.javacv.cpp.opencv_core.CvSeq;
import com.googlecode.javacv.cpp.opencv_core.IplImage;
import com.googlecode.javacpp.*;
import com.googlecode.javacv.cpp.opencv_core.*;
import com.googlecode.javacv.cpp.opencv_video.BackgroundSubtractorMOG2;

import static com.googlecode.javacv.cpp.opencv_core.*;
import static com.googlecode.javacv.cpp.opencv_highgui.*;
import static com.googlecode.javacv.cpp.opencv_imgproc.*;
import static com.googlecode.javacv.cpp.opencv_objdetect.*;

//file exceptions
import java.io.IOException;
import java.io.FileNotFoundException;
//file append classes
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Date;
import java.util.concurrent.TimeUnit;

import jmapps.ui.ProgressThread;

public class MotionDetectionThread implements Runnable
{
	// video log file path
	private static  String VIDEO_ID = null;//"files/closeTry.avi";
	//  streaming log file path
	private static  String STREAMING_TXT = null;//"files/log.txt";
	private static  String STREAMING_log_file = null;  
	private static final float SMALLEST_AREA = 1000.0f;
	
	
 	private static CvMemStorage contourStorage;
 	public static File videofiles;
 	
	Thread thread ;
//	Building build = new Building();
	boolean isThreadRunning = false;
	 public void startThread(){
	        if(isThreadRunning){
	                return;
	        }
	        isThreadRunning = true;
	           thread.start();
	    }
	    
	    
	    public void stopThread(){
	        if(!isThreadRunning){
	                return;
	        }
	        isThreadRunning = false;           
	           thread.stop();
	    }
	
	    public void setvideo(String videoname) throws Exception
	    {
	    	VIDEO_ID = videoname;
	    	File file =new File(videoname);
	    	STREAMING_TXT = MotionDetectionThread.getvideoname(file.getName());
	    	File createfile = new File(file.getParent()+"/"+STREAMING_TXT+".txt");
	    	STREAMING_log_file = createfile.getPath();
	    	if(createfile.createNewFile())
	    	{
	    		thread = new Thread(new MotionDetectionThread());
		    	startThread();
		    	
	    	}
		}
	    
		@Override
		public void run() 
		{
			System.out.println("=============="+videofiles.getPath());
			File videoarray [] =  videofiles.listFiles();
	    	for(File video : videoarray)
	    	{
	    		System.out.println("file = "+video.getPath());
//	    		build.setvideo(video.getPath());
	    		
	    		VIDEO_ID = video.getPath();
		    	File file =new File(VIDEO_ID);
		    	STREAMING_TXT = MotionDetectionThread.getvideoname(file.getName());
		    	File createfile = new File(file.getParent()+"/"+STREAMING_TXT+".txt");
		    	STREAMING_log_file = createfile.getPath();
		    	try {
					if(!createfile.createNewFile())
					{
						stopThread();
					}
				} catch (IOException e) {}
	    	
	    	
			// TODO Auto-generated method stub
			Loader.load(opencv_objdetect.class);
    		//create contour storage to save contours in it
    		contourStorage = CvMemStorage.create();
    		
    		
    		//initializing frame grabber
    		System.out.println("Initializing frame grabber...============="+VIDEO_ID);
    		OpenCVFrameGrabber grabber = new OpenCVFrameGrabber(VIDEO_ID);
    		try{
    		grabber.start();
    		//images to work on 
            IplImage image = null;
            IplImage prevImage = null;
            IplImage diff = null;
    		//start grabbing images from the video the video grabbed image
            IplImage videoGrabbedImage = grabber.grab();     	   
    		//get width and height of the image
//    		int width  = videoGrabbedImage.width();
//    		int height = videoGrabbedImage.height();
    		
    		while ((videoGrabbedImage = grabber.grab()) != null) 
        	    {
        			   //---------------------------new processing methods using image difference------------------------------------------------
        	           cvSmooth(videoGrabbedImage, videoGrabbedImage, CV_GAUSSIAN, 9, 9, 2, 2);
        	           if (image == null) {
        	               image = IplImage.create(videoGrabbedImage.width(), videoGrabbedImage.height(), IPL_DEPTH_8U, 1);
        	               cvCvtColor(videoGrabbedImage, image, CV_RGB2GRAY);
        	           } 
        	           else {
        	               prevImage = IplImage.create(videoGrabbedImage.width(), videoGrabbedImage.height(), IPL_DEPTH_8U, 1);
        	               prevImage = image;
        	               image = IplImage.create(videoGrabbedImage.width(), videoGrabbedImage.height(), IPL_DEPTH_8U, 1);
        	               cvCvtColor(videoGrabbedImage, image, CV_RGB2GRAY);
        	           }
        	           if (diff == null) {
        	               diff = IplImage.create(videoGrabbedImage.width(), videoGrabbedImage.height(), IPL_DEPTH_8U, 1);
        	           }
        	           
        	           
        	    	   videoGrabbedImage = grabber.grab();
        	    	   //------------------calculating time stamp---------------------------------
        		       double frameRate = grabber.getFrameRate();  
        		       int lengthInFrames = grabber.getLengthInFrames();
        		       
        	    	   int currentFrameNumber = grabber.getFrameNumber();
//        	    	   long lengthInTime = getTime(grabber.getLengthInTime());
//        	    	   double frameRate = (lengthInFrames / lengthInTime);
        	    	   
        	    	   long timeStamp = (long)(currentFrameNumber / frameRate);
        	    	   int timeStampMin = (int)TimeUnit.SECONDS.toMinutes(timeStamp);
        	    	   //-------------------------------------------------------------------------
        	    	   
        	    	   if (videoGrabbedImage == null) {
        	    				System.out.println("Image grab failed");
        	    				break;
        	    	   }
        	    	   if (prevImage != null) {
        	    		   System.out.println("thread arrive here");
        	                // perform ABS difference
        	                cvAbsDiff(image, prevImage, diff);
        	                //related to new code
//        	    	    	cvErode(diff, diff, null, 2); // was 5
//        	    	    	cvDilate(diff, diff, null, 30); // was 5 ,increase the white space in the image
//        	    	    	cvSmooth(diff, diff, CV_BLUR, 3); //was 5  // more noise reduction
        	        		// morph. close
        	        		cvDilate(diff, diff, null, 10);
        	        		cvErode(diff, diff, null, 3);

        	        		// 9x9 Median Filter
        	        		cvSmooth(diff, diff, CV_MEDIAN, 9, 9, 2, 2);

        	        		// 9x9 Gauss Filter
        	        		cvSmooth(diff, diff, CV_GAUSSIAN, 9, 9, 2, 2);

        	        		// morph. close again
        	        		cvDilate(diff, diff, null, 25);
        	        		cvErode(diff, diff, null, 3);
        	                // do some threshold for wipe away useless details
        	                cvThreshold(diff, diff, 16, 255, CV_THRESH_BINARY);
       	    	       }
        	    	   //----------------------------------------------------------------------------------------------------

        	    	   //----------------------------my code for drawing-----------------------------------------------
//           	           CvSeq contours = new CvSeq(); //remove this method if you gonna play with the biggest contour
           	    	   CvSeq contours = findBiggestContour(diff); //find biggest contour method
        	    	   CvSeq ptr = new CvSeq();

//        	    	   cvFindContours(diff, contourStorage, contours, Loader.sizeof(CvContour.class), 
//        	    					  CV_RETR_CCOMP, 
//        	    					  CV_CHAIN_APPROX_SIMPLE, 
//        	    					  cvPoint(0,0));

        	    	   CvRect boundbox;
        	    	   if(contours!=null && !contours.isNull()) {
        	    		   		for (ptr = contours; ptr != null; ptr = ptr.h_next()) {
        	    		   				boundbox = cvBoundingRect(ptr, 0);
        	    		   				cvRectangle( videoGrabbedImage , cvPoint( boundbox.x(), boundbox.y() ), 
        	    		   							cvPoint( boundbox.x() + boundbox.width(), boundbox.y() + boundbox.height()),
        	    		   							cvScalar( 0, 255, 0, 0 ), 1, 0, 0 );
        	    		   				//coordinates of the box around the found contour
        	    		   				int x = boundbox.x();
        	    		   				int y = boundbox.y();
    //---------------------------------------------------Data Streaming in file----------------------------------
        	    		   				try{
        	    		   						streamData(x + "," + y + "," + Integer.toString(timeStampMin));
        	    		   				}
        	    		   				catch(Exception e)
        	    		   				{
        	    		   						//print error exception
        	    		   						e.printStackTrace();
        	    		   				}
    //------------------------------------------------------------------------------------------------------------
        	    		   		}//End for
        	    	    }//End if
        	    		if (currentFrameNumber == (lengthInFrames -1) || currentFrameNumber == (lengthInFrames -2))
        	    		{
        	    			grabber.stop();
        	        	    break;
        	    		}
        	    }//End of while loop
    		
//    		stopThread();
    		}//end of try
    		catch(Exception e){
    			e.printStackTrace();
    		}
	    }
	    	stopThread();
}//end of run method
	
	
	
	
    public static void main(String[] args) throws Exception 
	{
    	// Preload the opencv_objdetect module to work around a known
    	
    	MotionDetectionThread build = new MotionDetectionThread();
    	String videofolder = args[0];
    	System.out.println("file = "+videofolder);
//    	File file = new File (videofolder);
    	MotionDetectionThread.videofiles = new File(videofolder);
//    	File videoarray [] =  file.listFiles();
//    	for(File video : videoarray)
//    	{
//    		System.out.println("file = "+video.getPath());
//    		build.setvideo(video.getPath());
//    	}
    	build.thread = new Thread(new MotionDetectionThread());
    	build.startThread();
    	
	}//End of Main Method
//----------------------------------------------------------------------------------------------------------------

// get file name function
public static String getvideoname(String filename)
{
    String  videoname;
    int dot = filename.lastIndexOf('.');
    videoname = filename.substring(0, dot);
    return videoname;
}    
//-------------------------------------------method that converts time------------------------------------------
    
    /*
     * Convert a millisecond duration to a string format
     * @param millis A duration to convert to a string form
     * @return A string of the form "X Days Y Hours Z Minutes A Seconds".
     */
    public static String getDuration(long millis)
    {
        if(millis < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millis);
        millis -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millis);
        millis -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
        millis -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);

        StringBuilder sb = new StringBuilder(64);
//        sb.append(days);
//        sb.append(" Days ");
//        sb.append(hours);
//        sb.append(" Hours ");
        sb.append(minutes + ",");
//        sb.append(minutes);
//        sb.append(" Minutes ");
        sb.append(seconds);
//        sb.append(" Seconds");

        return(sb.toString());
    }
//----------------------------------------------------------------------------------------------------------------
//-------------------------------------------method that converts time------------------------------------------
    public static long getTime(long millis)
    {
        if(millis < 0)
        {
            throw new IllegalArgumentException("Duration must be greater than zero!");
        }

        long days = TimeUnit.MILLISECONDS.toDays(millis);
        millis -= TimeUnit.DAYS.toMillis(days);
        long hours = TimeUnit.MILLISECONDS.toHours(millis);
        millis -= TimeUnit.HOURS.toMillis(hours);
        long minutes = TimeUnit.MILLISECONDS.toMinutes(millis);
        millis -= TimeUnit.MINUTES.toMillis(minutes);
        long seconds = TimeUnit.MILLISECONDS.toSeconds(millis);
        return seconds;
    }
//----------------------------------------------------------------------------------------------------------------
    
//---------------------------------------finding biggest contour method ----------------------------
    private static CvSeq findBiggestContour(IplImage imgThreshed)
    {
    	CvSeq bigContour = null;
    	// generate all the contours in the threshold image as a list
    	CvSeq contours = new CvSeq(null);
    	cvFindContours(imgThreshed, contourStorage, contours,
                       Loader.sizeof(CvContour.class),
                       CV_RETR_LIST, CV_CHAIN_APPROX_SIMPLE);
    	// find the largest contour in the list based on bounded box size
    	float maxArea = SMALLEST_AREA;
//    	CvBox2D maxBox = null;
    	while (contours != null && !contours.isNull()) {
    		if (contours.elem_size() > 0) {
    			CvBox2D box = cvMinAreaRect2(contours, contourStorage);
    			if (box != null) {
    				CvSize2D32f size = box.size();
    				float area = size.width() * size.height();
    				if (area > maxArea) {
    					maxArea = area;
    					bigContour = contours;
    				}
    			}
    		}
    		contours = contours.h_next();
    	}
    	return bigContour;
    }  // end of findBiggestContour()
//-------------------------------------------------------------------------------------------------------
    
//---------------------------------------Text Streaming method ---------------------------------
    public static void streamData(String txtToAppend)throws FileNotFoundException, IOException
    {
    	 PrintWriter out = new PrintWriter(
    			 		   new BufferedWriter(
    			 		   new FileWriter(STREAMING_log_file, true)));
    	 out.println(txtToAppend);
    	 out.close();
    }	
//-------------------------------------------------------------------------------------------------
    
}//End of the class
